#!/usr/bin/env ruby
# frozen_string_literal: true

DEFAULT_CONFIG_FILE = '/usr/local/etc/radio/urls'
CONFIG_FILE = "#{ENV['HOME']}/.config/radio/urls"

def clear_screen
  puts "\e[H\e[2J"
end

def get_user_choice(list)
  list.each_with_index do |elem, i|
    puts "#{i + 1}: #{elem}"
  end
  print 'Enter number or press ^C to go back> '
  begin
    (Integer(gets) - 1)
  rescue StandardError
    false
  end
end

def choose_from_list(list, names)
  clear_screen
  puts '== Internet Radio Player =='
  until (user_selection = get_user_choice(names))
    puts 'Invalid selection, please try again.' if user_selection && !list[user_selection]
  end

  list[user_selection]
end

# Radio: the base radio class
class Radio
  attr_reader :channel

  def initialize
    if system('command -v mpc 1>/dev/null 2>&1')
      @player = 'mpc'
    elsif system('command -v mpv 1>/dev/null 2>&1')
      @player = 'mpv'
    else
      warn 'neither mpc nor mpv installed.'
      exit 1
    end
  end

  # Adding stream to mpc is handled by subclass, because add/load might vary depending on stream
  def play(stream)
    if @player == 'mpc'
      system 'mpc', 'play'
    else
      clear_screen
      puts "Loading #{stream}..."
      system 'mpv', stream, '--vid=no', '--volume=50'
    end
  end
end

class WFMU < Radio
  HOSTNAME = 'wfmu.org'
  def initialize(selected_channel)
    super()
    @channel = selected_channel[:link]
  end

  def play
    if @player == 'mpc'
      system 'mpc', 'clear', 1 => '/dev/null'
      system 'mpc', 'load', @channel
    end
    super @channel
  end
end

# SomaFM radio subclass
class SomaFM < Radio
  HOSTNAME = 'somafm.com'

  def initialize(selected_channel)
    super()
    @channel = selected_channel[:link]
  end

  def play
    if @player == 'mpc'
      system 'mpc', 'clear', 1 => '/dev/null'
      system('mpc', 'load', @channel)
    end
    super @channel
  end
end

# Radios with a direct stream link
class OtherRadio < Radio
  def initialize(selected_channel)
    super()
    @channel = selected_channel[:link]
  end

  def play
    if @player == 'mpc'
      system 'mpc', 'clear', 1 => '/dev/null'
      if @channel =~ /\.m3u$/
        system 'mpc', 'load', @channel
      else
        system 'mpc', 'add', @channel
      end
    end
    super @channel
  end
end

# Sounds of Earth
class SoundsOfEarth < Radio
  require 'json'
  require 'open-uri'

  def initialize(_)
    channels = retrieve_channels
    @channel = choose_from_list(channels.map { |c| c[:link] }, channels.map { |c| c[:name] }) while @channel.nil?
    super()
  rescue Interrupt
    @channel = nil
  end

  def play
    if @player == 'mpc'
      system 'mpc', 'clear', 1 => '/dev/null'
      system 'mpc', 'add', @channel
    end
    super @channel
  end

  private

  def retrieve_channels
    URI('https://soundsofearth.eco/regions.json').open do |response|
      streams = JSON.parse(response.read)['results']
      streams.map { |stream| { name: "#{stream['name']} (#{stream['description']})", link: stream['sound'] } }
    end
  rescue OpenURI::HTTPError
    []
  end
end

# RadioGarden global radios
class RadioGarden < Radio
  require 'json'
  require 'open-uri'
  require 'cgi'

  def initialize(_)
    @base_url = 'https://radio.garden/api'
    puts 'No radio found, please try again.' while (retrieved_channels = search_channels).empty?
    channels = parse_channels(retrieved_channels)
    selected_channel = choose_from_list(channels, channels.map { |c| c[:name] }) while selected_channel.nil?
    @channel = get_channel_link(selected_channel)
    super()
  rescue Interrupt
    @channel = nil
  end

  def play
    if @player == 'mpc'
      system 'mpc', 'clear', 1 => '/dev/null'
      system 'mpc', 'add', @channel
    end
    super @channel
  end

  private

  def search_channels
    print 'Enter radio search: '
    query = gets.chomp
    URI.parse("#{@base_url}/search?q=#{CGI.escape query}").open do |response|
      JSON.parse(response.read)['hits']['hits']
    end
  rescue OpenURI::HTTPError
    []
  end

  def get_channel_link(selected_channel)
    # Will redirect
    @channel = URI.parse("#{@base_url}/ara/content/listen/#{selected_channel[:id]}/channel.mp3").open(redirect: false)
  rescue OpenURI::HTTPRedirect => e
    @channel = e.uri.to_s.gsub(/\?listening-from.*/, '')
  rescue OpenURI::HTTPError
    @channel = None
  end

  def parse_channels(retrieved_channels)
    retrieved_channels.inject([]) do |channels, c|
      channels << { name: "#{c['_source']['title']} (#{c['_source']['subtitle']})",
                    id: c['_source']['channelId'] }
    end
  end
end

# Play music from a subreddit
class Subreddit < Radio
  require 'json'
  require 'open-uri'
  require 'shellwords'

  def initialize(_)
    puts 'Subreddit has no music posts or does not exist.' while (posts = retrieve_subreddit_posts).empty?
    @links = extract_post_links(posts)
    super()
  rescue Interrupt
    @channel = nil
  end

  def play
    puts "Number of tracks: #{@links.length}"
    # TODO: support mpd
    system("mpv --vid=no --volume=50 -- #{@links.map { |l| l[:url] }.shelljoin}")
  end

  private

  def retrieve_subreddit_posts
    print 'Enter subreddit name: '
    sub = gets.chomp
    url = "https://www.reddit.com/r/#{sub}/top.json?t=month&limit=100&show=all"
    URI.parse(url).open('User-Agent' => 'ruby/2.7', 'Accept' => 'application/json') do |response|
      @channel = sub
      JSON.parse(response.read)['data']['children']
    end
  rescue OpenURI::HTTPError
    []
  end

  def extract_post_links(posts)
    posts.each_with_object([]) do |post, links|
      p = post['data']
      if !p['is_self'] && p['post_hint'] != 'image'
        links.append(title: p['title'], url: p['url'], reddit: "https://reddit.com#{p['permalink']}")
      end
    end
  end
end

def read_config_file(cfg)
  channels = []
  ignore = /^\s*(\#|\s*$)/
  File.open(cfg, 'r').each do |line|
    next if line.match?(ignore)

    parts = line.chomp.split(/(?<=")\s+(?=http)/)
    channel = { name: parts.first.gsub('"', ''), link: parts.last }
    case URI.parse(channel[:link]).host
    when SomaFM::HOSTNAME
      channel[:radio] = SomaFM
    when WFMU::HOSTNAME
      channel[:radio] = WFMU
    else
      channel[:radio] = OtherRadio
    end
    channels << channel
  end

  channels
end

def load_channels_from_config
  if File.exist? CONFIG_FILE
    cfg = CONFIG_FILE
  elsif File.exist? DEFAULT_CONFIG_FILE
    cfg = DEFAULT_CONFIG_FILE
  else
    warn "Please set URLs in #{ENV['HOME']}/.config/radio/urls."
    exit 1
  end
  read_config_file(cfg)
end

channels = load_channels_from_config + [{ name: 'RadioGarden', radio: RadioGarden },
                                        { name: 'Sounds of Earth', radio: SoundsOfEarth },
                                        { name: 'Subreddit', radio: Subreddit }]

begin
  radio = nil
  loop do
    selected_channel = choose_from_list(channels, channels.map { |c| c[:name] }) while selected_channel.nil?
    radio = selected_channel[:radio].new(selected_channel)
    break unless selected_channel.nil? || radio.channel.nil?
  end
  radio.play
rescue Interrupt
  exit 0
end
